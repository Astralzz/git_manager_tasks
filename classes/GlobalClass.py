import os
import sys
from typing import List, Optional

from consts.env import PASS_SENSITIVE
from classes.ConsoleColors import ConsoleColors
from byTypes.configTypes import MenuOptionType, ExtendedConfigType, LoggerProtocol


# Clase abstracta para manejar las configuraciones globales
class GlobalClass:
    
    # Atributos opcionales que pueden ser agregados por clases hijas
    logger: Optional["LoggerProtocol"]
    config: ExtendedConfigType | None

    # Constructor de la clase
    def __init__(self, selected_config: Optional["ExtendedConfigType"] = None) -> None:
        # Inicializa los colores
        self.colors = ConsoleColors()
        # Inicializa config como None por defecto
        self.config  = selected_config

    # Funci√≥n para imprimir la configuraci√≥n seleccionada
    def view_selected_config(self, config: "ExtendedConfigType") -> None:
        """
        Imprime la configuraci√≥n seleccionada
        @param {ExtendedConfigType} config: La configuraci√≥n seleccionada
        """
        self.colors.info("--------------------------------")
        self.colors.info(
            f"üëâ Configuraci√≥n seleccionada: {config.get('id')} - {config.get('name')}"
        )
        self.colors.info(f"üëâ N√∫mero: {config.get('number')}")
        self.colors.info(f"üëâ Repo: {config.get('repo_path')}")
        self.colors.info(f"üëâ Rama base: {config.get('base_branch')}")
        self.colors.info(f"üëâ Rama feature: {config.get('feature_branch')}\n")
        self.colors.info(f"üëâ Proyecto: {config.get('project')}")
        self.colors.info(f"üëâ Secci√≥n: {config.get('section')}")
        self.colors.info(f"üëâ Tarea: {config.get('task')}")
        self.colors.info("--------------------------------")
        self.colors.info("\n")

    # Funci√≥n para confirmar la acci√≥n o salir del programa
    def confirm_action(
        self,
        message: str = "¬øEst√°s seguro de querer continuar? ",
    ) -> bool:
        """
        Pide configuraci√≥n para continuar o salir del programa
        @param {str} message: El mensaje a mostrar
        @return {bool} True si se confirma la acci√≥n, False si se cancela
        """
        confirm_input = input(f"üìù {message}, Presiona 's/S' para continuar o cualquier otra tecla para salir: ").strip()
        
        # Registra la confirmaci√≥n del usuario
        if hasattr(self, 'logger') and self.logger is not None:
            self.logger.log_user_input("confirmation", confirm_input)
        
        if confirm_input.lower() != "s":
            self.colors.error("No se ha confirmado la acci√≥n.")
            if hasattr(self, 'logger') and self.logger is not None:
                self.logger.log_warning("Acci√≥n no confirmada", "confirm_action")
            return False
        else:
            self.colors.success("Se ha confirmado la acci√≥n.")
            if hasattr(self, 'logger') and self.logger is not None:
                self.logger.log_success("Acci√≥n confirmada", "confirm_action")
            return True

    # Funci√≥n para pedir la contrase√±a para acciones sensibles
    def ask_pass(self, message: str = "Escribe la contrase√±a: ") -> None:
        """
        Pide el pass para acciones sensibles
        """
        pass_input = input(f"üìù {message}").strip()
        
        # Registra que se pidi√≥ contrase√±a (sin mostrar la contrase√±a)
        if hasattr(self, 'logger') and self.logger is not None:
            self.logger.log_user_input("password", "***HIDDEN***")
        
        # Verifica si la contrase√±a es correcta
        if pass_input != PASS_SENSITIVE:
            self.colors.error("La contrase√±a es incorrecta.")
            if hasattr(self, 'logger') and self.logger is not None:
                self.logger.log_error("Contrase√±a incorrecta", "ask_pass")
                self.logger.log_program_end()
            sys.exit(1)
        else:
            if hasattr(self, 'logger') and self.logger is not None:
                self.logger.log_success("Contrase√±a verificada correctamente", "ask_pass")

    # Funci√≥n para validar los campos requeridos
    def validate_required_fields(self, fields: list[str], path: str) -> None:
        """
        Valida los campos requeridos
        @param {list[str]} fields: Los campos requeridos
        @param {str} path: La ruta del repositorio
        """
        # Verifica si faltan campos en la configuraci√≥n seleccionada
        for field in fields:
            # Obtiene el valor del campo
            value = self.config.get(field) if isinstance(self.config, dict) else None
            # Verifica si el campo esta vaci√≥
            if not value:
                self.colors.error(f"Falta el campo '{field}' en la configuraci√≥n.")
                sys.exit(1)
        # Verifica si la ruta del repositorio existe
        if not os.path.exists(path):
            self.colors.error(f"La ruta {path} no existe.")
            sys.exit(1)
        self.colors.success("Todos los campos requeridos son validos.")

    # Funci√≥n abstracta para mostrar el menu de opciones
    def show_menu(self, options: List["MenuOptionType"]) -> None:
        """
        Muestra el menu de opciones
        @param {List[MenuOptionType]} options: Las opciones del menu [{ function: callable, description: str }]
        """
        # Validar que las opciones tengan la estructura correcta
        for option in options:
            if 'function' not in option or 'description' not in option:
                self.colors.error("Formato de opciones inv√°lido. Cada opci√≥n debe tener 'function' y 'description'.")
                return

        # Bucle para mostrar el menu de opciones
        while True:
            # Mostrar el menu de opciones
            self.colors.info("--------------------------------")
            self.colors.info("üîÑ MENU DE OPCIONES PARA GIT:")
            for index, option in enumerate(options, start=1):
                self.colors.info(f"[{index}] {option.get('description')}")
            self.colors.info(f"[{len(options) + 1}] ‚ùå Salir")
            self.colors.info("--------------------------------\n")

            # Pedir la opci√≥n seleccionada
            selected = input(
                "üëâ Escribe el n√∫mero de la opci√≥n que quieres usar: "
            ).strip()

            # Verificar si el usuario quiere salir
            if selected == str(len(options) + 1):
                self.colors.info("üîÑ Saliendo del programa...")
                # Registra el fin del programa
                if hasattr(self, 'logger') and self.logger is not None:
                    self.logger.log_program_end()
                sys.exit(0)

            # Verificar si la opci√≥n es v√°lida y ejecutar la funci√≥n correspondiente
            try:
                selected_index = int(selected) - 1
                if 0 <= selected_index < len(options):
                    # Registra la selecci√≥n del men√∫
                    if hasattr(self, 'logger') and self.logger is not None:
                        option_description = options[selected_index]['description']
                        self.logger.log_menu_selection(selected_index + 1, option_description)
                    
                    options[selected_index]['function']()
                else:
                    self.colors.error("Opci√≥n no v√°lida.")
                    if hasattr(self, 'logger') and self.logger is not None:
                        self.logger.log_warning(f"Opci√≥n no v√°lida seleccionada: {selected}", "show_menu")
            except ValueError:
                self.colors.error("Por favor, ingresa un n√∫mero v√°lido.")
                if hasattr(self, 'logger') and self.logger is not None:
                    self.logger.log_error(f"Entrada no v√°lida en men√∫: {selected}", "show_menu")
